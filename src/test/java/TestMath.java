import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.parallel.Execution;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.parallel.ExecutionMode.CONCURRENT;

@Execution(CONCURRENT)
class TestMath {
    @Test
    void testMath() {
        assertDoesNotThrow(() -> Common.runCode("""
                (let-seq
                    (def fr 8)
                    (def a (* 2 3))
                    (if (/= a 6) (raise "a is not 6") 'nil)
                    (def b (+ 2 3))
                    (if (/= b 5) (raise "b is not 5") 'nil)
                    (def c (- 2 3))
                    (if (/= c -1) (raise "c is not -1") 'nil)
                    (def d (/ 2 3))
                    (if (/= d 0.66666667) (raise \\str:format "d is not 0.66666667, got {?d}") 'nil)
                    (def ee (** 2 3))
                    (if (/= ee 8) (raise "ee is not 8") 'nil)
                    (def f (** 4 0.5))
                    (if (/= f 2) (raise "f is not 2") 'nil)
                    (def g (** 2 -1))
                    (if (/= g 0.5) (raise "g is not 0.5") 'nil)
                    (def h (** 2 0))
                    (if (/= h 1) (raise "h is not 1") 'nil)
                    (def i (** 2 1))
                    (if (/= i 2) (raise "i is not 2") 'nil)
                    (def j (pi 2))
                    (if (/= j 6.2831854) (raise \\str:format "j is not 6.2831854, got {?j}") 'nil)
                    (def k (e 2))
                    (if (/= k 5.4365636) (raise \\str:format "k is not 5.4365636, got {?k}") 'nil)
                    (def l (bit:and 151 37))
                    (if (/= l 5) (raise \\str:format "l is not 5, got {?l}") 'nil)
                    (def m (bit:or 132 67))
                    (if (/= m 199) (raise \\str:format "m is not 199, got {?m}") 'nil)
                    (def n (bit:xor 132 67))
                    (if (/= n 199) (raise \\str:format "n is not 199, got {?n}") 'nil)
                    (def o (bit:not 132))
                    (if (/= o -133) (raise \\str:format "o is not -133, got {?o}") 'nil)
                    (def p (bit:nand 132 2))
                    (if (/= p 0) (raise \\str:format "p is not 0, got {?p}") 'nil)
                    (def q (bit:popcount 132))
                    (if (/= q 2) (raise \\str:format "q is not 2, got {?q}") 'nil)
                    (def r (<=> 2 6))
                    (if (/= r -1) (raise \\str:format "r is not -1, got {?r}") 'nil)
                    (def s (<=> 6 2))
                    (if (/= s 1) (raise \\str:format "s is not 1, got {?s}") 'nil)
                    (def t (sqrt 16))
                    (if (/= t 4) (raise \\str:format "t is not 4, got {?t}") 'nil)
                    (def u (signum 16))
                    (if (/= u 1) (raise \\str:format "u is not 1, got {?u}") 'nil)
                    (def v (signum -16))
                    (if (/= v -1) (raise \\str:format "v is not -1, got {?v}") 'nil)
                    (def w (signum 0))
                    (if (/= w 0) (raise \\str:format "w is not 0, got {?w}") 'nil)
                    (def x (round 1.5))
                    (if (/= x 2) (raise \\str:format "x is not 2, got {?x}") 'nil)  
                    (def y (round -1.5))
                    (if (/= y -2) (raise \\str:format "y is not -2, got {?y}") 'nil)
                    (def z (round 1.4))
                    (if (/= z 1) (raise \\str:format "z is not 1, got {?z}") 'nil)
                    (def aa (round -1.4))
                    (if (/= aa -1) (raise \\str:format "aa is not -1, got {?aa}") 'nil)
                    (def bb (round 1.6))
                    (if (/= bb 2) (raise \\str:format "bb is not 2, got {?bb}") 'nil)
                    (def cc (re 3J2))
                    (if (/= cc 3) (raise \\str:format "cc is not 3, got {?cc}") 'nil)
                    (def dd (im 3J2))
                    (if (/= dd 2) (raise \\str:format "dd is not 2, got {?dd}") 'nil)
                    (def ff (re -3J0))
                    (if (/= ff -3) (raise \\str:format "ff is not -3, got {?ff}") 'nil)
                    (def gg (im -3J0))
                    (if (/= gg 0) (raise \\str:format "gg is not 0, got {?gg}") 'nil)
                    (def hh (or 1 0))
                    (if (/= hh 1) (raise \\str:format "hh is not 1, got {?hh}") 'nil)
                    (def ii (or 0 0))
                    (if (/= ii 0) (raise \\str:format "ii is not 0, got {?ii}") 'nil)
                    (def jj (and 1 0))
                    (if (/= jj 0) (raise \\str:format "jj is not 0, got {?jj}") 'nil)
                    (def kk (and 1 1))
                    (if (/= kk 1) (raise \\str:format "kk is not 1, got {?kk}") 'nil)
                    (def ll (not 1))
                    (if (/= ll 0) (raise \\str:format "ll is not 0, got {?ll}") 'nil)
                    (def mm (not 0))
                    (if (/= mm 1) (raise \\str:format "mm is not 1, got {?mm}") 'nil)
                    (def nn (mod 5 2))
                    (if (/= nn 1) (raise \\str:format "nn is not 1, got {?nn}") 'nil)
                    (def oo (mod 5 3))
                    (if (/= oo 2) (raise \\str:format "oo is not 2, got {?oo}") 'nil)
                    (def pp (mod 3.6 2.3))
                    (if (/= pp 1.3) (raise \\str:format "pp is not 1.3, got {?pp}") 'nil)
                    (def qq (mod 3J6.5 2J1.3))
                    (if (/= qq -0.4J-1.4) (raise \\str:format "qq is not -0.4J-1.4, got {?qq}") 'nil)
                    )
        """));
    }
}