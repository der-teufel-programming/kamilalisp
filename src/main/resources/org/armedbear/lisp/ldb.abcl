"; -*- Mode: Lisp -*-"
(SYSTEM:INIT-FASL :VERSION 43)
(COMMON-LISP:SETQ SYSTEM:*SOURCE* #P"/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/ldb.lisp")
(COMMON-LISP:SETQ SYSTEM::*FASL-UNINTERNED-SYMBOLS* #(#:WHOLE-245449 #:ENV-245450 #:WHOLE-245467 #:ENV-245468))
(COMMON-LISP:SETQ SYSTEM:*FASL-LOADER* (SYSTEM::MAKE-FASL-CLASS-LOADER "org.armedbear.lisp.ldb"))
(COMMON-LISP:IN-PACKAGE "COMMON-LISP-USER")
(SYSTEM:%IN-PACKAGE "SYSTEM")
(PROGN (PUT 'BYTE 'SOURCE (CONS '((:FUNCTION BYTE) "/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/ldb.lisp" 
1582) (GET 'BYTE 'SOURCE NIL))) (FSET 'BYTE (GET-FASL-FUNCTION *FASL-LOADER* 0) 1582 
'(SIZE POSITION) NIL))
(PROGN (PUT 'BYTE-SIZE 'SOURCE (CONS '((:FUNCTION BYTE-SIZE) "/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/ldb.lisp" 
1635) (GET 'BYTE-SIZE 'SOURCE NIL))) (FSET 'BYTE-SIZE (GET-FASL-FUNCTION *FASL-LOADER* 
1) 1635 '(BYTESPEC) NIL))
(PROGN (PUT 'BYTE-POSITION 'SOURCE (CONS '((:FUNCTION BYTE-POSITION) "/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/ldb.lisp" 
1682) (GET 'BYTE-POSITION 'SOURCE NIL))) (FSET 'BYTE-POSITION (GET-FASL-FUNCTION 
*FASL-LOADER* 2) 1682 '(BYTESPEC) NIL))
(PROGN (PUT 'LDB 'SOURCE (CONS '((:FUNCTION LDB) "/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/ldb.lisp" 
1733) (GET 'LDB 'SOURCE NIL))) (FSET 'LDB (GET-FASL-FUNCTION *FASL-LOADER* 3) 1733 
'(BYTESPEC INTEGER) NIL))
(PROGN (PUT 'LDB-TEST 'SOURCE (CONS '((:FUNCTION LDB-TEST) "/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/ldb.lisp" 
1863) (GET 'LDB-TEST 'SOURCE NIL))) (FSET 'LDB-TEST (GET-FASL-FUNCTION *FASL-LOADER* 
4) 1863 '(BYTESPEC INTEGER) NIL))
(PROGN (PUT 'DPB 'SOURCE (CONS '((:FUNCTION DPB) "/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/ldb.lisp" 
1939) (GET 'DPB 'SOURCE NIL))) (FSET 'DPB (GET-FASL-FUNCTION *FASL-LOADER* 5) 1939 
'(NEWBYTE BYTESPEC INTEGER) NIL))
(PUT 'LDB 'SOURCE (CONS '(:SETF-EXPANDER "/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/ldb.lisp" 
2205) (GET 'LDB 'SOURCE NIL)))
(PUT 'LDB 'SETF-EXPANDER (FUNCTION (LAMBDA (#0? #1?) (BLOCK LDB (LET* ((ENV #1?)) 
(UNLESS (<= 2 (DOT-LENGTH (CDR #0?)) 2) (ARG-COUNT-ERROR 'DEFINE-SETF-EXPANDER 'LDB 
(CDR #0?) '(BYTESPEC PLACE &ENVIRONMENT ENV) 2 2)) (LET* ((BYTESPEC (CAR (CDR #0?))) 
(PLACE (CAR (CDR (CDR #0?))))) (BLOCK LDB (MULTIPLE-VALUE-BIND (DUMMIES VALS NEWVAL 
SETTER GETTER) (GET-SETF-EXPANSION PLACE ENV) (IF (AND (CONSP BYTESPEC) (EQ (CAR 
BYTESPEC) 'BYTE)) (LET ((N-SIZE (GENSYM)) (N-POS (GENSYM)) (N-NEW (GENSYM))) (VALUES 
(LIST* N-SIZE N-POS DUMMIES) (LIST* (SECOND BYTESPEC) (THIRD BYTESPEC) VALS) (LIST 
N-NEW) (BACKQ-LIST 'LET (BACKQ-LIST (BACKQ-LIST (CAR NEWVAL) (BACKQ-LIST 'DPB N-NEW 
(BACKQ-LIST 'BYTE N-SIZE N-POS) GETTER))) SETTER N-NEW) (BACKQ-LIST 'LDB (BACKQ-LIST 
'BYTE N-SIZE N-POS) GETTER))) (LET ((BTEMP (GENSYM)) (GNUVAL (GENSYM))) (VALUES (CONS 
BTEMP DUMMIES) (CONS BYTESPEC VALS) (LIST GNUVAL) (BACKQ-LIST 'LET (BACKQ-LIST (BACKQ-LIST 
(CAR NEWVAL) (BACKQ-LIST 'DPB GNUVAL BTEMP GETTER))) SETTER GNUVAL) (BACKQ-LIST 'LDB 
BTEMP GETTER))))))))))))
(PROGN (PUT '%LDB 'SOURCE (CONS '((:FUNCTION %LDB) "/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/ldb.lisp" 
3264) (GET '%LDB 'SOURCE NIL))) (FSET '%LDB (GET-FASL-FUNCTION *FASL-LOADER* 6) 3264 
'(SIZE POSITION INTEGER) NIL))
(PUT '%LDB 'SOURCE (CONS '(:SETF-EXPANDER "/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/ldb.lisp" 
3405) (GET '%LDB 'SOURCE NIL)))
(PUT '%LDB 'SETF-EXPANDER (FUNCTION (LAMBDA (#2? #3?) (BLOCK %LDB (LET* ((ENV #3?)) 
(UNLESS (<= 3 (DOT-LENGTH (CDR #2?)) 3) (ARG-COUNT-ERROR 'DEFINE-SETF-EXPANDER '%LDB 
(CDR #2?) '(SIZE POSITION PLACE &ENVIRONMENT ENV) 3 3)) (LET* ((SIZE (CAR (CDR #2?))) 
(POSITION (CAR (CDR (CDR #2?)))) (PLACE (CAR (CDR (CDR (CDR #2?)))))) (BLOCK %LDB 
(MULTIPLE-VALUE-BIND (DUMMIES VALS NEWVAL SETTER GETTER) (GET-SETF-EXPANSION PLACE 
ENV) (LET ((N-SIZE (GENSYM)) (N-POS (GENSYM)) (N-NEW (GENSYM))) (VALUES (LIST* N-SIZE 
N-POS DUMMIES) (LIST* SIZE POSITION VALS) (LIST N-NEW) (BACKQ-LIST 'LET (BACKQ-LIST 
(BACKQ-LIST (CAR NEWVAL) (BACKQ-LIST 'DPB N-NEW (BACKQ-LIST 'BYTE N-SIZE N-POS) GETTER))) 
SETTER N-NEW) (BACKQ-LIST 'LDB (BACKQ-LIST 'BYTE N-SIZE N-POS) GETTER)))))))))))
