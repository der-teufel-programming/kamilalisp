"; -*- Mode: Lisp -*-"
(SYSTEM:INIT-FASL :VERSION 43)
(COMMON-LISP:SETQ SYSTEM:*SOURCE* #P"/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/socket.lisp")
(COMMON-LISP:SETQ SYSTEM::*FASL-UNINTERNED-SYMBOLS* #(#:SOCKET))
(COMMON-LISP:SETQ SYSTEM:*FASL-LOADER* (SYSTEM::MAKE-FASL-CLASS-LOADER "org.armedbear.lisp.socket"))
(COMMON-LISP:IN-PACKAGE "COMMON-LISP-USER")
(SYSTEM:%IN-PACKAGE "EXTENSIONS")
(EXPORT '(MAKE-SOCKET MAKE-SERVER-SOCKET SERVER-SOCKET-CLOSE SOCKET-ACCEPT SOCKET-CLOSE 
GET-SOCKET-STREAM SOCKET-PEER-PORT SOCKET-LOCAL-PORT SOCKET-LOCAL-ADDRESS SOCKET-PEER-ADDRESS 
READ-TIMEOUT WRITE-TIMEOUT))
(PROGN (SYSTEM:PUT 'GET-SOCKET-STREAM 'SYSTEM::SOURCE (CONS '((:FUNCTION GET-SOCKET-STREAM) 
"/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/socket.lisp" 1831) (GET 
'GET-SOCKET-STREAM 'SYSTEM::SOURCE NIL))) (SYSTEM:FSET 'GET-SOCKET-STREAM (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 0) 1831 '(SOCKET &KEY (ELEMENT-TYPE 'CHARACTER) (EXTERNAL-FORMAT 
:DEFAULT)) ":ELEMENT-TYPE must be CHARACTER or (UNSIGNED-BYTE 8); the default is CHARACTER.
EXTERNAL-FORMAT must be of the same format as specified for OPEN."))
(PROGN (SYSTEM:PUT 'MAKE-SOCKET 'SYSTEM::SOURCE (CONS '((:FUNCTION MAKE-SOCKET) "/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/socket.lisp" 
2466) (GET 'MAKE-SOCKET 'SYSTEM::SOURCE NIL))) (SYSTEM:FSET 'MAKE-SOCKET (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 1) 2466 '(HOST PORT) "Create a TCP socket for client communication to HOST on PORT."))
(PROGN (SYSTEM:PUT 'MAKE-SERVER-SOCKET 'SYSTEM::SOURCE (CONS '((:FUNCTION MAKE-SERVER-SOCKET) 
"/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/socket.lisp" 2597) (GET 
'MAKE-SERVER-SOCKET 'SYSTEM::SOURCE NIL))) (SYSTEM:FSET 'MAKE-SERVER-SOCKET (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 2) 2597 '(PORT) "Create a TCP server socket listening for clients on PORT."))
(PROGN (SYSTEM:PUT 'SOCKET-ACCEPT 'SYSTEM::SOURCE (CONS '((:FUNCTION SOCKET-ACCEPT) 
"/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/socket.lisp" 2728) (GET 
'SOCKET-ACCEPT 'SYSTEM::SOURCE NIL))) (SYSTEM:FSET 'SOCKET-ACCEPT (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 3) 2728 '(SOCKET) "Block until able to return a new socket for handling a incoming request to the specified server SOCKET."))
(PROGN (SYSTEM:PUT 'SOCKET-CLOSE 'SYSTEM::SOURCE (CONS '((:FUNCTION SOCKET-CLOSE) 
"/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/socket.lisp" 2899) (GET 
'SOCKET-CLOSE 'SYSTEM::SOURCE NIL))) (SYSTEM:FSET 'SOCKET-CLOSE (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 4) 2899 '(SOCKET) "Close the client SOCKET."))
(PROGN (SYSTEM:PUT 'SERVER-SOCKET-CLOSE 'SYSTEM::SOURCE (CONS '((:FUNCTION SERVER-SOCKET-CLOSE) 
"/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/socket.lisp" 2989) (GET 
'SERVER-SOCKET-CLOSE 'SYSTEM::SOURCE NIL))) (SYSTEM:FSET 'SERVER-SOCKET-CLOSE (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 5) 2989 '(SOCKET) "Close the server SOCKET."))
(PROCLAIM '(INLINE %SOCKET-ADDRESS %SOCKET-PORT))
(SETF (SYSTEM:INLINE-EXPANSION '%SOCKET-ADDRESS) '(LAMBDA (SOCKET ADDRESS-NAME) (BLOCK 
%SOCKET-ADDRESS (JAVA:JCALL "getHostAddress" (JAVA:JCALL-RAW ADDRESS-NAME SOCKET)))))
(PROGN (SYSTEM:PUT '%SOCKET-ADDRESS 'SYSTEM::SOURCE (CONS '((:FUNCTION %SOCKET-ADDRESS) 
"/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/socket.lisp" 3142) (GET 
'%SOCKET-ADDRESS 'SYSTEM::SOURCE NIL))) (SYSTEM:FSET '%SOCKET-ADDRESS (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 6) 3142 '(SOCKET ADDRESS-NAME) "Return the underlying ADDRESS-NAME for SOCKET."))
(SETF (SYSTEM:INLINE-EXPANSION '%SOCKET-PORT) '(LAMBDA (SOCKET PORT-NAME) (BLOCK 
%SOCKET-PORT (JAVA:JCALL PORT-NAME SOCKET))))
(PROGN (SYSTEM:PUT '%SOCKET-PORT 'SYSTEM::SOURCE (CONS '((:FUNCTION %SOCKET-PORT) 
"/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/socket.lisp" 3309) (GET 
'%SOCKET-PORT 'SYSTEM::SOURCE NIL))) (SYSTEM:FSET '%SOCKET-PORT (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 7) 3309 '(SOCKET PORT-NAME) "Return the PORT-NAME of SOCKET."))
(PROGN (SYSTEM:PUT 'SOCKET-LOCAL-ADDRESS 'SYSTEM::SOURCE (CONS '((:FUNCTION SOCKET-LOCAL-ADDRESS) 
"/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/socket.lisp" 3419) (GET 
'SOCKET-LOCAL-ADDRESS 'SYSTEM::SOURCE NIL))) (SYSTEM:FSET 'SOCKET-LOCAL-ADDRESS (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 8) 3419 '(SOCKET) "Returns the local address of the SOCKET as a dotted quad string."))
(PROGN (SYSTEM:PUT 'SOCKET-PEER-ADDRESS 'SYSTEM::SOURCE (CONS '((:FUNCTION SOCKET-PEER-ADDRESS) 
"/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/socket.lisp" 3574) (GET 
'SOCKET-PEER-ADDRESS 'SYSTEM::SOURCE NIL))) (SYSTEM:FSET 'SOCKET-PEER-ADDRESS (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 9) 3574 '(SOCKET) "Returns the peer address of the SOCKET as a dotted quad string."))
(PROGN (SYSTEM:PUT 'SOCKET-LOCAL-PORT 'SYSTEM::SOURCE (CONS '((:FUNCTION SOCKET-LOCAL-PORT) 
"/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/socket.lisp" 3726) (GET 
'SOCKET-LOCAL-PORT 'SYSTEM::SOURCE NIL))) (SYSTEM:FSET 'SOCKET-LOCAL-PORT (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 10) 3726 '(SOCKET) "Returns the local port number of the SOCKET."))
(PROGN (SYSTEM:PUT 'SOCKET-PEER-PORT 'SYSTEM::SOURCE (CONS '((:FUNCTION SOCKET-PEER-PORT) 
"/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/socket.lisp" 3852) (GET 
'SOCKET-PEER-PORT 'SYSTEM::SOURCE NIL))) (SYSTEM:FSET 'SOCKET-PEER-PORT (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 11) 3852 '(SOCKET) "Returns the peer port number of the given SOCKET."))
(PROGN (SYSTEM:PUT 'READ-TIMEOUT 'SYSTEM::SOURCE (CONS '((:FUNCTION READ-TIMEOUT) 
"/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/socket.lisp" 3977) (GET 
'READ-TIMEOUT 'SYSTEM::SOURCE NIL))) (SYSTEM:FSET 'READ-TIMEOUT (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 12) 3977 '(SOCKET SECONDS) "Time in SECONDS to set local implementation of 'SO_RCVTIMEO' on SOCKET."))
(PROGN (SYSTEM:PUT 'WRITE-TIMEOUT 'SYSTEM::SOURCE (CONS '((:FUNCTION WRITE-TIMEOUT) 
"/Users/evenson/work/abcl.easye.git/src/org/armedbear/lisp/socket.lisp" 4214) (GET 
'WRITE-TIMEOUT 'SYSTEM::SOURCE NIL))) (SYSTEM:FSET 'WRITE-TIMEOUT (SYSTEM::GET-FASL-FUNCTION 
SYSTEM:*FASL-LOADER* 13) 4214 '(SOCKET SECONDS) "No-op setting of write timeout to SECONDS on SOCKET."))
(PROVIDE '#0?)
