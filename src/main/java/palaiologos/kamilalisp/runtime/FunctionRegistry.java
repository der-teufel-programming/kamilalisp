package palaiologos.kamilalisp.runtime;

import palaiologos.kamilalisp.atom.Atom;
import palaiologos.kamilalisp.atom.Environment;
import palaiologos.kamilalisp.runtime.IO.GetFile;
import palaiologos.kamilalisp.runtime.IO.Writeln;
import palaiologos.kamilalisp.runtime.array.*;
import palaiologos.kamilalisp.runtime.array.hof.*;
import palaiologos.kamilalisp.runtime.datetime.*;
import palaiologos.kamilalisp.runtime.math.*;
import palaiologos.kamilalisp.runtime.math.bit.*;
import palaiologos.kamilalisp.runtime.math.cmp.*;
import palaiologos.kamilalisp.runtime.math.hyperbolic.*;
import palaiologos.kamilalisp.runtime.math.prime.*;
import palaiologos.kamilalisp.runtime.math.trig.*;
import palaiologos.kamilalisp.runtime.meta.*;
import palaiologos.kamilalisp.runtime.regex.RegexMatches;
import palaiologos.kamilalisp.runtime.regex.RegexReplace;
import palaiologos.kamilalisp.runtime.regex.RegexSplit;
import palaiologos.kamilalisp.runtime.string.*;

import java.math.BigDecimal;
import java.util.Set;

public class FunctionRegistry {
    public static void registerDefault(Environment env) {
        env.set("fr", new Atom(new BigDecimal(200)));
        env.set("lambda", new Atom(new Dfn()));
        env.set("λ", new Atom(new Dfn()));
        env.set("def", new Atom(new GlobalBinding()));
        env.set("car", new Atom(new Car()));
        env.set("cdr", new Atom(new Cdr()));
        env.set("reverse", new Atom(new Reverse()));
        env.set("⌽", new Atom(new Reverse()));
        env.set("range", new Atom(new Range()));
        env.set("⍳", new Atom(new Range()));
        env.set("foldl", new Atom(new Foldl()));
        env.set("foldr", new Atom(new Foldr()));
        env.set("foldl1", new Atom(new Foldl1()));
        env.set("foldr1", new Atom(new Foldr1()));
        env.set("lift", new Atom(new Lift()));
        env.set("tie", new Atom(new Tie()));
        env.set("if", new Atom(new If()));
        env.set("str:format", new Atom(new Format()));
        env.set("str:lines", new Atom(new Lines()));
        env.set("to-string", new Atom(new ToString()));
        env.set("filter", new Atom(new Filter()));
        env.set("⍭", new Atom(new Filter()));
        env.set("filter-idx", new Atom(new FilterIdx()));
        env.set("map-idx", new Atom(new MapIdx()));
        env.set("parallel-filter", new Atom(new ParallelFilter()));
        env.set("any", new Atom(new Any()));
        env.set("all", new Atom(new All()));
        env.set("none", new Atom(new None()));
        env.set("count", new Atom(new Count()));
        env.set("⍏", new Atom(new Count()));
        env.set("sort", new Atom(new Sort()));
        env.set("scanl", new Atom(new Scanl()));
        env.set("scanl1", new Atom(new Scanl1()));
        env.set("scanr", new Atom(new Scanr()));
        env.set("scanr1", new Atom(new Scanr1()));
        env.set("replicate", new Atom(new Replicate()));
        env.set("defun", new Atom(new Defun()));
        env.set("outer-product", new Atom(new OuterProduct()));
        env.set("env-keys", new Atom(new EnvKeys()));
        env.set("levenshtein", new Atom(new Levenshtein()));
        env.set("tally", new Atom(new Tally()));
        env.set("⍴", new Atom(new Tally()));
        env.set("same", new Atom(new Same()));
        env.set("converge", new Atom(new Converge()));
        env.set("not-same", new Atom(new NotSame()));
        env.set("≡", new Atom(new Same()));
        env.set("≢", new Atom(new NotSame()));
        env.set("grade-up", new Atom(new GradeUp()));
        env.set("grade-down", new Atom(new GradeDown()));
        env.set("⍋", new Atom(new GradeUp()));
        env.set("⍒", new Atom(new GradeDown()));
        env.set("cons", new Atom(new Cons()));
        env.set("flatten", new Atom(new Flatten()));
        env.set("∊", new Atom(new Flatten()));
        env.set("let", new Atom(new Let()));
        env.set("cond", new Atom(new Cond()));
        env.set("cmpx", new Atom(new Cmpx()));
        env.set("import", new Atom(new Import()));
        env.set("append", new Atom(new Append()));
        env.set("get-file", new Atom(new GetFile()));
        env.set("try-catch", new Atom(new TryCatch()));
        env.set("writeln", new Atom(new Writeln()));
        env.set("let-seq", new Atom(new LetSeq()));
        env.set("while", new Atom(new While()));
        env.set("partial-while", new Atom(new PartialWhile()));
        env.set("⍣", new Atom(new While()));
        env.set("memo", new Atom(new Memo()));
        env.set("index-of", new Atom(new IndexOf()));
        env.set("to-digits", new Atom(new ToDigits()));
        env.set("without", new Atom(new Without()));
        env.set("from-digits", new Atom(new FromDigits()));
        env.set("cycle", new Atom(new Cycle()));
        env.set("take", new Atom(new Take()));
        env.set("↑", new Atom(new Take()));
        env.set("drop", new Atom(new Drop()));
        env.set("↓", new Atom(new Drop()));
        env.set("unique-mask", new Atom(new UniqueMask()));
        env.set("unique", new Atom(new Unique()));
        env.set("intersection", new Atom(new Intersection()));
        env.set("union", new Atom(new Union()));
        env.set("parse-number", new Atom(new ParseNumber()));
        env.set("prefixes", new Atom(new Prefixes()));
        env.set("suffixes", new Atom(new Suffixes()));
        env.set("interleave", new Atom(new Interleave()));
        env.set("take-while", new Atom(new TakeWhile()));
        env.set("drop-while", new Atom(new DropWhile()));

        env.set("prime:factors", new Atom(new PrimeFactors()));
        env.set("prime:is?", new Atom(new IsPrime()));
        env.set("prime:next", new Atom(new NextPrime()));
        env.set("prime:nth", new Atom(new PrimeNo()));

        env.set("abs", new Atom(new Abs()));
        env.set("bernoulli", new Atom(new Bernoulli()));
        env.set("**", new Atom(new DoubleStar()));
        env.set("ln", new Atom(new Ln()));
        env.set("sqrt", new Atom(new Sqrt()));
        env.set("√", new Atom(new Sqrt()));
        env.set(">", new Atom(new Gt()));
        env.set("<", new Atom(new Lt()));
        env.set(">=", new Atom(new Ge()));
        env.set("≥", new Atom(new Ge()));
        env.set("<=", new Atom(new Le()));
        env.set("≤", new Atom(new Le()));
        env.set("sin", new Atom(new Sin()));
        env.set("cos", new Atom(new Cos()));
        env.set("tan", new Atom(new Tan()));
        env.set("asin", new Atom(new Asin()));
        env.set("acos", new Atom(new Acos()));
        env.set("atan", new Atom(new Atan()));
        env.set("re", new Atom(new Re()));
        env.set("complex-parts", new Atom(new ComplexParts()));
        env.set("im", new Atom(new Im()));
        env.set("csc", new Atom(new Csc()));
        env.set("sec", new Atom(new Sec()));
        env.set("cot", new Atom(new Cot()));
        env.set("acsc", new Atom(new Acsc()));
        env.set("asec", new Atom(new Asec()));
        env.set("acot", new Atom(new Acot()));
        env.set("sinh", new Atom(new Sinh()));
        env.set("cosh", new Atom(new Cosh()));
        env.set("tanh", new Atom(new Tanh()));
        env.set("coth", new Atom(new Coth()));
        env.set("sech", new Atom(new Sech()));
        env.set("csch", new Atom(new Csch()));
        env.set("asinh", new Atom(new Asinh()));
        env.set("acosh", new Atom(new Acosh()));
        env.set("atanh", new Atom(new Atanh()));
        env.set("acoth", new Atom(new Acoth()));
        env.set("asech", new Atom(new Asech()));
        env.set("acsch", new Atom(new Acsch()));
        env.set("log2", new Atom(new Log2()));
        env.set("log10", new Atom(new Log10()));
        env.set("gcd", new Atom(new Gcd()));
        env.set("lcm", new Atom(new Lcm()));
        env.set("gamma", new Atom(new Gamma()));
        env.set("Γ", new Atom(new Gamma()));
        env.set("not", new Atom(new Not()));
        env.set("¬", new Atom(new Not()));
        env.set("bit:and", new Atom(new BitAnd()));
        env.set("bit:or", new Atom(new BitOr()));
        env.set("bit:xor", new Atom(new BitXor()));
        env.set("bit:nand", new Atom(new BitNand()));
        env.set("bit:not", new Atom(new BitNot()));
        env.set("bit:popcount", new Atom(new BitPopcount()));
        env.set("fib", new Atom(new Fib()));
        env.set("ceil", new Atom(new Ceil()));
        env.set("⌈", new Atom(new Ceil()));
        env.set("floor", new Atom(new Floor()));
        env.set("⌊", new Atom(new Floor()));
        env.set("round", new Atom(new Round()));
        env.set("and", new Atom(new And()));
        env.set("or", new Atom(new Or()));
        env.set("∧", new Atom(new And()));
        env.set("∨", new Atom(new Or()));
        env.set("exp", new Atom(new Exp()));
        env.set("max", new Atom(new Max()));
        env.set("min", new Atom(new Min()));
        env.set("signum", new Atom(new Signum()));
        env.set("true", Atom.TRUE);
        env.set("⊤", Atom.TRUE);
        env.set("false", Atom.FALSE);
        env.set("⊥", Atom.FALSE);
        env.set("=", new Atom(new Eq()));
        env.set("/=", new Atom(new Neq()));
        env.set("≠", new Atom(new Neq()));
        env.set("pi", new Atom(new Pi()));
        env.set("π", new Atom(new Pi()));
        env.set("e", new Atom(new E()));
        env.set("+", new Atom(new Plus()));
        env.set("-", new Atom(new Minus()));
        env.set("*", new Atom(new Star()));
        env.set("/", new Atom(new Slash()));
        env.set("mod", new Atom(new Mod()));
        env.set("<=>", new Atom(new Spaceship()));
        env.set("⇔", new Atom(new Spaceship()));
        env.set("ucs", new Atom(new Ucs()));
        env.set("match", new Atom(new Match()));

        env.set("regex:matches?", new Atom(new RegexMatches()));
        env.set("regex:replace", new Atom(new RegexReplace()));
        env.set("regex:split", new Atom(new RegexSplit()));

        env.set("date:from", new Atom(new DateTimeFrom()));
        env.set("time:from", new Atom(new TimeFrom()));
        env.set("date:add", new Atom(new DateTimeAdd()));
        env.set("date:difference", new Atom(new DateTimeDifference()));
        env.set("time:hours", new Atom(new TimeHours()));
        env.set("time:minutes", new Atom(new TimeMinutes()));
        env.set("time:seconds", new Atom(new TimeSeconds()));
        env.set("time:nanoseconds", new Atom(new TimeNanoseconds()));
        env.set("date:years", new Atom(new DateYears()));
        env.set("date:months", new Atom(new DateMonths()));
        env.set("date:days", new Atom(new DateDays()));
        env.set("date:to-list", new Atom(new DateTimeToList()));
        env.set("date:day-of-week", new Atom(new DateTimeDayOfWeek()));
        env.set("date:now", new Atom(new DateNow()));
        env.set("date:now-tz", new Atom(new DateNowTZ()));
        env.set("time:now", new Atom(new TimeNow()));
        env.set("time:now-tz", new Atom(new TimeNowTZ()));
        env.set("date:parse", new Atom(new DateParse()));
        env.set("time:parse", new Atom(new TimeParse()));
    }
}
