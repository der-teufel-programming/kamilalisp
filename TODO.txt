- More persistent data structures?
- File/Terminal I/O functions
- More string utilities (interpolate, capitalize, etc.)
- Web server stuff
- graphics/sound
- extend regex library
- matrix stuff
- http/https server w. routing
- actor model (create actor handles using actor:create, subscribe to handles using actor:subscribe,
broadcast messages using actor:broadcast, unsubscribe to handles using actor:unsubscribe)
- an idea to slightly simplify list and tree traversal: a sink data structure. you can declare
a sink at any place in the code and have some code to be evaluated in its context. then, any call
to sink:push will add the data to the sink in an impure way, regardless of where you called it but
it must be in the "sink block" and what the sink block returns is the content of the sink itself
and the return value of the code.
- audio
- more shell builtins
- unit testing
- bzip3 (needs java porting).

book:
- huffman coding, elias gamma, histograms, fft, ski calculus, matrix algos, Chinese Remainder Theorem?

interpreter programming guidelines:
- always use absolute File-s and avoid specifying path as a string.
- always catch exceptions in new threads using safeEvaluate.